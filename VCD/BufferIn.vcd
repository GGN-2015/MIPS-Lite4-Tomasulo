$date
	Wed May 18 20:50:11 2022
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module tb_BufferIn $end
$var wire 36 ! out_valueB [35:0] $end
$var wire 36 " out_valueA [35:0] $end
$var wire 1 # out_ready $end
$var wire 1 $ out_buzy $end
$var wire 2 % out_algorithm [1:0] $end
$var reg 1 & cdb_buzy $end
$var reg 3 ' cdb_device [2:0] $end
$var reg 32 ( cdb_value [31:0] $end
$var reg 1 ) clk $end
$var reg 2 * in_algorithm [1:0] $end
$var reg 3 + in_device [2:0] $end
$var reg 1 , in_hasInput $end
$var reg 36 - in_valueA [35:0] $end
$var reg 36 . in_valueB [35:0] $end
$var reg 1 / nxt_buzy $end
$var reg 1 0 rst $end
$scope module U_BufferIn $end
$var wire 1 & cdb_buzy $end
$var wire 3 1 cdb_device [2:0] $end
$var wire 32 2 cdb_value [31:0] $end
$var wire 1 ) clk $end
$var wire 3 3 device_now [2:0] $end
$var wire 2 4 in_algorithm [1:0] $end
$var wire 3 5 in_device [2:0] $end
$var wire 1 , in_hasInput $end
$var wire 36 6 in_valueA [35:0] $end
$var wire 36 7 in_valueB [35:0] $end
$var wire 1 / nxt_buzy $end
$var wire 1 # out_ready $end
$var wire 1 0 rst $end
$var wire 36 8 fetchCDB_valueB [35:0] $end
$var wire 36 9 fetchCDB_valueA [35:0] $end
$var reg 2 : out_algorithm [1:0] $end
$var reg 1 $ out_buzy $end
$var reg 36 ; out_valueA [35:0] $end
$var reg 36 < out_valueB [35:0] $end
$scope module U_FetchCDB_valueA $end
$var wire 36 = buffer_value [35:0] $end
$var wire 1 & cdb_buzy $end
$var wire 3 > cdb_device [2:0] $end
$var wire 32 ? cdb_value [31:0] $end
$var reg 36 @ buffer_newValue [35:0] $end
$upscope $end
$scope module U_FetchCDB_valueB $end
$var wire 36 A buffer_value [35:0] $end
$var wire 1 & cdb_buzy $end
$var wire 3 B cdb_device [2:0] $end
$var wire 32 C cdb_value [31:0] $end
$var reg 36 D buffer_newValue [35:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
b1 3
bx 2
bx 1
10
x/
bx .
bx -
x,
bx +
bx *
0)
bx (
bx '
x&
bx %
x$
x#
bx "
bx !
$end
#100
0#
b0 !
b0 <
b0 "
b0 ;
b0 %
b0 :
0$
1)
#200
0)
00
#300
1)
#400
b100000000000101111000110000101001110 8
b100000000000101111000110000101001110 D
b1100000000000000000000000000000000 9
b1100000000000000000000000000000000 @
0)
1/
b101001110010111111110110001 (
b101001110010111111110110001 2
b101001110010111111110110001 ?
b101001110010111111110110001 C
b11 '
b11 1
b11 >
b11 B
0&
b100000000000101111000110000101001110 .
b100000000000101111000110000101001110 7
b100000000000101111000110000101001110 A
b1100000000000000000000000000000000 -
b1100000000000000000000000000000000 6
b1100000000000000000000000000000000 =
b1 *
b1 4
b10 +
b10 5
1,
#500
1)
#600
0)
b1 +
b1 5
#700
b100000000000101111000110000101001110 !
b100000000000101111000110000101001110 <
b1100000000000000000000000000000000 "
b1100000000000000000000000000000000 ;
b1 %
b1 :
1$
1)
#800
0)
0,
#900
1)
#1000
b100000000101001110010111111110110001 9
b100000000101001110010111111110110001 @
0)
1&
#1100
1#
b100000000101001110010111111110110001 "
b100000000101001110010111111110110001 ;
1)
#1200
b1100000000000000000000000000000000 9
b1100000000000000000000000000000000 @
0)
0&
#1300
1)
#1400
0)
0/
#1500
0#
b0 !
b0 <
b0 "
b0 ;
b0 %
b0 :
0$
1)
#1600
0)
#1700
1)
#1800
0)
